# Klimenko Maxim Sergievich
# https://github.com/imthenachoman/How-To-Secure-A-Linux-Server/tree/master
# https://www.kernel.org/doc/Documentation/sysctl/net.txt
# https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/networking/ip-sysctl.txt?id=d82bae12dc38d79a2b77473f5eb0612a3d69c55b
# https://www.kernel.org/doc/Documentation/sysctl/vm.txt
# https://www.ibm.com/docs/en/linux-on-systems?topic=tuning-tcpip-ipv4-settings
# https://wiki.webko.net.ua/index.php?title=Kernel:_Neighbour_table_overflow/%D0%9F%D0%B5%D1%80%D0%B5%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_arp_%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86%D0%B8

###
### Performance
###

# Recommended value to improve performance when sufficient memory exists in a system
vm.swappiness=10

###
### SYSTEM SECURITY ###
###

# Kernel entropy pool size
# kernel.random.poolsize=8192

# Enable address Space Randomization
kernel.randomize_va_space=2

# Restrict core dumps
fs.suid_dumpable=0

# Maximum number of open files
fs.file-max=65535

# Maximum number of process pid
kernel.pid_max=65535

# Defines the maximum allowable size in bytes of any single message in a message queue. This value must not exceed the size of the queue (msgmnb). Defines the maximum size in bytes of a single message queue.
kernel.msgmax=65535
kernel.msgmnb=65535

# This parameter sets the total amount of shared memory pages that can be used system wide.
# 3906250 for (shmall*PAGE_SIZE) and 16 Gb
kernel.shmall=268435456
kernel.shmmax=268435456

# Hide kernel pointers
kernel.kptr_restrict=2

# Restrict reading from /proc/<pid>/maps to those who share ->mm or can ptrace pid
# kernel.maps_protect=1 No such file or directory	

# Restrict access to kernel logs
kernel.dmesg_restrict=1

# Restrict ptrace scope
kernel.yama.ptrace_scope=1

# Protect links on the filesystem
fs.protected_hardlinks=1
fs.protected_symlinks=1

# By setting core_uses_pid to 1, the coredump filename becomes core.PID
kernel.core_uses_pid=1

# tty: ldisc: set 0 to prevent autoloading of ldiscs
dev.tty.ldisc_autoload=0

# dmesg is the kernel log. It exposes a large amount of useful kernel debugging information, but this can often leak sensitive information, such as kernel pointers. Changing the above sysctl restricts the kernel log to the CAP_SYSLOG capability.
kernel.printk=3 3 3 3

# This restricts loading TTY line disciplines to the CAP_SYS_MODULE capability to prevent unprivileged attackers from loading vulnerable line disciplines with the TIOCSETD ioctl, which has been abused in a number of exploits before.
vm.unprivileged_userfaultfd=0

# Disallows open of FIFOs or regular files not owned by the user in world
fs.protected_fifos=2
fs.protected_regular=2

# Magic SysRq key
kernel.sysrq=0

kernel.ctrl-alt-del=0

# Non-Maskable Interrupt(NMI)
kernel.nmi_watchdog=1

# Kexec allows replacing the current running kernel
kernel.kexec_load_disabled=1

# User namespaces
# user.max_user_namespaces=0

# Unprivileged user namespaces
kernel.unprivileged_userns_clone=0

# Performance events add considerable kernel attack surface and have caused abundant vulnerabilities. This sysctl restricts all usage of performance events to the CAP_PERFMON capability (CAP_SYS_ADMIN on kernel versions prior to 5.8).
kernel.perf_event_paranoid=3

# ASLR is a common exploit mitigation which randomises the position of critical parts of a process in memory. This can make a wide variety of exploits harder to pull off, as they first require an information leak. The above settings increase the bits of entropy used for mmap ASLR, improving its effectiveness.
vm.mmap_rnd_bits=32
vm.mmap_rnd_compat_bits=16

# Contains, as a percentage of total available memory that contains free pages and reclaimable pages, the number of pages at which the background kernel flusher threads will start writing out dirty data.
vm.dirty_background_ratio=5

# Contains, as a percentage of total available memory that contains free pages and reclaimable pages, the number of pages at which a process which is generating disk writes will itself start writing out dirty data.
vm.dirty_ratio=30

# This is used to force the Linux VM to keep a minimum number of kilobytes free.
vm.min_free_kbytes=65535

# This file indicates the amount of address space  which a user process will be restricted from mmapping.
vm.mmap_min_addr=4096

# This value contains a flag that enables memory overcommitment.
vm.overcommit_memory=0

# When overcommit_memory is set to 2, the committed address space is not permitted to exceed swap plus this percentage of physical RAM.
vm.overcommit_ratio=50

# Enabling non-executable memfds
vm.memfd_noexec=1

###
### Network settings
###

# Packet scheduler
net.core.default_qdisc=fq

# The maximum number of packets that kernel can handle on a NAPI interrupt
net.core.dev_weight=64

# Maximum number of packets, queued on the INPUT side, when the interface receives packets faster than kernel can process them.
net.core.netdev_max_backlog=1000

# Maximum ancillary buffer size allowed per socket. Ancillary data is a sequence of struct cmsghdr structures with appended data.
net.core.optmem_max=65535

# The default setting of the socket receive buffer in bytes.
net.core.rmem_default=212992

# The maximum receive socket buffer size in bytes.
net.core.rmem_max=212992

# Maximum number of connections that can be queued for a socket.
net.core.somaxconn=4096

# The default setting (in bytes) of the socket send buffer.
net.core.wmem_default=212992

# The maximum send socket buffer size in bytes.
net.core.wmem_max=212992

# Maximum count of datagrams in Unix Domain Socket backlog
net.unix.max_dgram_qlen=10

#  TCP performs receive buffer auto-tuning, attempting to automatically size the buffer (no greater than tcp_rmem[2]) to match the size required by the path for full throughput.
net.ipv4.tcp_moderate_rcvbuf=1

# TCP saves various connection metrics in the route cache when the connection closes, so that connections established in the near future can use these to set initial conditions.
net.ipv4.tcp_no_metrics_save=1

# This value influences the timeout of a locally closed TCP connection, when RTO retransmissions remain unacknowledged. See tcp_retries2 for more details. The default value is 8. If your machine is a loaded WEB server, you should think about lowering this value, such sockets may consume significant resources. Cf. tcp_max_orphans.
net.ipv4.tcp_orphan_retries=0

# Initial reordering level of packets in a TCP stream. TCP stack can then dynamically adjust flow reordering level between this initial value and tcp_max_reordering
net.ipv4.tcp_reordering=3

# Contains three values that represent the minimum, default and maximum size of the TCP socket receive buffer.
# The default value represents the initial size of a TCP sockets receive buffer. This value supersedes net.core.rmem_default used by other protocols.
# Write - 8192
net.ipv4.tcp_wmem=4096 212992 212992
# Read
net.ipv4.tcp_rmem=4096 212992 212992

# Read Write buffers for UDP
net.ipv4.udp_rmem_min=65571
net.ipv4.udp_wmem_min=65571
# net.ipv6.udp_rmem_min=65591 No such file or directory
# net.ipv6.udp_wmem_min=65591 No such file or directory

# The number of times TCP will attempt to retransmit a packet on an established connection normally, without the extra effort of getting the network layers involved.
net.ipv4.tcp_retries1=3

# The maximum number of times a TCP packet is retransmitted in established state before giving up.
net.ipv4.tcp_retries2=15

# Enable select acknowledgments (SACKS).
net.ipv4.tcp_sack=1

# RFC 1122
net.ipv4.tcp_stdurg=1

# Enable timestamps as defined in RFC1323
net.ipv4.tcp_timestamps=1

# Local port range
net.ipv4.ip_local_port_range=49152 65535

# Maximum memory used to reassemble IP fragments.
net.ipv4.ipfrag_high_thresh=262144
net.ipv6.ip6frag_high_thresh=262144

# Manimum memory used to reassemble IP fragments.
net.ipv4.ipfrag_low_thresh=196608
net.ipv6.ip6frag_low_thresh=196608

# Provide RFC2861 behavior and time out the congestion window after an idle period.
net.ipv4.tcp_slow_start_after_idle=1

# How frequently the garbage collector for neighbour entries should attempt to run.
net.ipv4.neigh.default.gc_interval=30

# The minimum number of entries to keep in the ARP cache. The garbage collector will
# not run if there are fewer than this number of entries in the cache.
net.ipv4.neigh.default.gc_thresh1=32

# The soft maximum number of entries to keep in the ARP cache. The garbage collector will
# allow the number of entries to exceed this for 5 seconds before collection will be performed.
net.ipv4.neigh.default.gc_thresh2=1024

# The hard maximum number of entries to keep in the ARP cache. The garbage collector will
# always run if there are more than this number of entries in the cache.
net.ipv4.neigh.default.gc_thresh3=2048

# Increase TCP queue length
net.ipv4.neigh.default.proxy_qlen=64
net.ipv4.neigh.default.unres_qlen=6

# Enable fast recycling TIME-WAIT sockets. No such file or directory
# net.ipv4.tcp_tw_recycle=0

# Allow to reuse TIME-WAIT sockets for new connections when it is safe from protocol viewpoint.
net.ipv4.tcp_tw_reuse=0

# Enable window scaling as defined in RFC1323.
net.ipv4.tcp_window_scaling=0

###
### NETWORK SECURITY ###
###

# Do not allow unprivileged users to run code in the kernel through BPF
kernel.unprivileged_bpf_disabled=1
# Enable JIT compiler against SPECTRE variants
net.core.bpf_jit_enable=1
# Harden BPF JIT compiler
net.core.bpf_jit_harden=2

# TCP congestion control algoritm
# cat /proc/sys/net/ipv4/tcp_available_congestion_control
# reno cubic
net.ipv4.tcp_congestion_control=reno

# Prevent SYN attack, enable SYNcookies (they will kick-in when the max_syn_backlog reached)
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_syn_retries=2
net.ipv4.tcp_synack_retries=2
net.ipv4.tcp_max_syn_backlog=4096

# Disable packet forwarding
net.ipv4.ip_forward=0
net.ipv4.conf.all.forwarding=0
net.ipv4.conf.default.forwarding=0
net.ipv4.conf.lo.forwarding=0

net.ipv6.conf.all.forwarding=0
net.ipv6.conf.default.forwarding=0
net.ipv4.conf.lo.forwarding=0

# Enable IP spoofing protection
# Turn on source route verification
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.default.rp_filter=1
net.ipv4.conf.lo.rp_filter=1

# Disable Redirect Acceptance
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv4.conf.lo.accept_redirects=0

net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0
net.ipv4.conf.lo.secure_redirects=0

net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0
net.ipv6.conf.lo.accept_redirects=0

# Disable Redirect Sending
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0
net.ipv4.conf.lo.send_redirects=0

# Disable IP source routing
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0
net.ipv4.conf.lo.accept_source_route=0

net.ipv6.conf.all.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0
net.ipv6.conf.lo.accept_source_route=0

# Don't relay bootp
net.ipv4.conf.all.bootp_relay=0
net.ipv4.conf.default.bootp_relay=0
net.ipv4.conf.lo.bootp_relay=0

# Disable proxy ARP
net.ipv4.conf.all.proxy_arp=0
net.ipv4.conf.default.proxy_arp=0
net.ipv4.conf.lo.proxy_arp=0

net.ipv4.conf.all.arp_ignore=1
net.ipv4.conf.default.arp_ignore=1
net.ipv4.conf.lo.arp_ignore=1

net.ipv4.conf.all.arp_announce=2
net.ipv4.conf.default.arp_announce=2
net.ipv4.conf.lo.arp_announce=2

# Mitigate time-wait assassination hazards in TCP
net.ipv4.tcp_rfc1337=1

# Enable Explicit Congestion Notification (RFC 3168), disable it if it doesn't work for you
net.ipv4.tcp_ecn=1
net.ipv4.tcp_reordering=3

# Enable TCP Fast Open (RFC7413) to send and accept data in the opening SYN packet.
net.ipv4.tcp_fastopen=0

# While a perfectly valid “receive only” state for an un-orphaned connection, an orphaned connection in FIN_WAIT_2 state could otherwise wait forever for the remote to close its end of the connection.
net.ipv4.tcp_fin_timeout=15

# TCP keepalive
net.ipv4.tcp_keepalive_intvl=15
net.ipv4.tcp_keepalive_probes=5
net.ipv4.tcp_keepalive_time=1800

# Enable logging martian packages
# Otherwise it might cause DOS
net.ipv4.conf.default.log_martians=1
net.ipv4.conf.all.log_martians=1

# Enable bad error message Protection
net.ipv4.icmp_ignore_bogus_error_responses=0

# Enable ignoring broadcasts request
net.ipv4.icmp_echo_ignore_broadcasts=1

# Disable icmp echo requests
net.ipv4.icmp_echo_ignore_all=1

# Accept Router Advertisements; autoconfigure using them
net.ipv6.conf.all.accept_ra=0
net.ipv6.conf.default.accept_ra=0
net.ipv6.conf.lo.accept_ra=0

# IPV6 autoconfiguration
net.ipv6.conf.all.autoconf=0
net.ipv6.conf.default.autoconf=0
net.ipv6.conf.lo.autoconf=0

# Ensure that subsequent connections use the new values
# PUT TO THE END
net.ipv4.route.flush=1
net.ipv6.route.flush=1

# IPv6 addresses are generated from your computer's MAC address, making your IPv6 address unique and tied directly to your computer. Privacy extensions generate a random IPv6 address to mitigate this form of tracking. Note that these steps are unnecessary if you have spoofed your MAC address or have disabled IPv6.
net.ipv6.conf.all.use_tempaddr=2
net.ipv6.conf.default.use_tempaddr=2
net.ipv6.conf.lo.use_tempaddr=2

# CVE-2023-2156
net.ipv6.conf.all.rpl_seg_enabled=0
net.ipv6.conf.default.rpl_seg_enabled=0
net.ipv6.conf.lo.rpl_seg_enabled=0

# Disable IPv6
net.ipv6.conf.default.disable_ipv6=1
net.ipv6.conf.all.disable_ipv6=1
net.ipv6.conf.lo.disable_ipv6=1

